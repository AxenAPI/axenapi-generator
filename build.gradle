plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'pro.axenix-innovation'
description = 'axenapi-codegen-generator'
sourceCompatibility = '11'

String repoURL = ""
String sonatypeRepoURL = ""

if (version.endsWith('-SNAPSHOT')) {
    repoURL = System.getenv('NEXUS_SERVER_URL_SNAPSHOT').toString()
    sonatypeRepoURL = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
} else {
    repoURL = System.getenv('NEXUS_SERVER_URL_RELEASE').toString()
    sonatypeRepoURL = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

String nexus_user = System.getenv('NEXUS_USER')
String nexus_password = System.getenv('NEXUS_PASSWORD')
String sonatype_nexus_user = System.getenv('SONATYPE_NEXUS_USER')
String sonatype_nexus_password = System.getenv('SONATYPE_NEXUS_PASSWORD')

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.name
            groupId project.group
            version version
            from components.java
            pom {
                name = 'AxenAPI'
                description = 'Library for generation Spring conrollers by consumers (kafka consumers and other).'
                url = 'https://github.com/AxenAPI/axenapi-generator'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "axenix-innovation"
                        name = "AxenAPI-Generator Contributors"
                        email = "axenapi-info@axenix.pro"
                    }
                }
                scm {
                    url = "https://github.com/AxenAPI/axenapi-generator"
                    connection = "scm:git:git://github.com/AxenAPI/axenapi-generator.git"
                    developerConnection = "scm:git:ssh://git@github.com:AxenAPI/axenapi-generator.git"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/AxenAPI/axenapi-generator/issues"
                }
            }
        }
    }
    repositories {
        maven {
            allowInsecureProtocol = true
            url repoURL
            credentials.setUsername(nexus_user)
            credentials.setPassword(nexus_password)
        }
        maven {
            allowInsecureProtocol = true
            url sonatypeRepoURL
            credentials.setUsername(sonatype_nexus_user)
            credentials.setPassword(sonatype_nexus_password)
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-amqp:2.7.8'
    implementation 'junit:junit:4.13.2'
    implementation 'org.openapitools:openapi-generator:6.4.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}