/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package service.impl;

import org.springframework.messaging.support.MessageHeaderAccessor;
import org.springframework.stereotype.Service;
import service.RabbitSenderService;
import org.springframework.amqp.rabbit.core.RabbitTemplate;

import java.util.Map;

import org.springframework.amqp.support.converter.MessagingMessageConverter;
import org.springframework.amqp.core.MessageProperties;
import org.springframework.messaging.Message;

import java.nio.charset.StandardCharsets;
import java.util.UUID;

@Service
public class RabbitSenderServiceImpl implements RabbitSenderService {

    private String messageIdName = "{{messageIdName}}";
    private String correlationIdName = "{{correlationIdName}}";
    private Boolean sendBytes = {{sendBytes}};
    private Boolean generateMessageId = {{generateMessageId}};
    private Boolean generateCorrelationId = {{generateCorrelationId}};

    private final RabbitTemplate rabbitTemplate;
    private final MessagingMessageConverter converter;

    public RabbitSenderServiceImpl(RabbitTemplate rabbitTemplate,
                                  MessagingMessageConverter converter) {
        this.rabbitTemplate = rabbitTemplate;
        this.converter = converter;
    }

    public void send(String queueName, Object message, Map<String, String> params) {

        MessageProperties messageProperties = new MessageProperties();
        messageProperties.setConsumerQueue(queueName);
        if (generateMessageId) {
            if (sendBytes) {
                messageProperties.setHeader(messageIdName, UUID.randomUUID().toString().getBytes(StandardCharsets.UTF_8));
            } else {
                messageProperties.setHeader(messageIdName, UUID.randomUUID());
            }
        }
        if (generateCorrelationId) {
            if (sendBytes) {
                messageProperties.setHeader(correlationIdName, UUID.randomUUID().toString().getBytes(StandardCharsets.UTF_8));
            } else {
                messageProperties.setHeader(correlationIdName, UUID.randomUUID());
            }
        }
        if (params != null && params.size() > 0) {
            for (var entry : params.entrySet()) {
                if (sendBytes) {
                    messageProperties.setHeader(entry.getKey(), entry.getValue().getBytes(StandardCharsets.UTF_8));
                } else {
                    messageProperties.setHeader(entry.getKey(), entry.getValue());
                }
            }
        }
        Message msg = converter.toMessage(message, messageProperties);
        rabbitTemplate.send(msg);
    }
}

