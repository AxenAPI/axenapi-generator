/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package {{apiPackage}};

import org.axenix.axenapi.annotation.KafkaHandlerDescription;
import org.axenix.axenapi.annotation.annotation.KafkaHandlerTags;
import org.axenix.axenapi.annotation.annotation.KafkaSecured;
import org.springframework.kafka.annotation.KafkaHandler;
import org.springframework.kafka.annotation.KafkaListener;
import org.axenix.axenapi.annotation.annotation.KafkaHandlerHeader;
import org.axenix.axenapi.annotation.annotation.KafkaHandlerHeaders;
{{#imports}}import {{import}};
{{/imports}}
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.Headers;
import java.util.Map;

{{#operations}}
    {{#operation.0.vendorExtensions}}
//@KafkaListener(topics = "{{topic}}", groupId = "{{groupId}}")
    {{/operation.0.vendorExtensions}}
{{/operations}}
public interface {{baseName}}Listener {

{{#operations}}
    {{#operation}}
        {{#vendorExtensions}}
    @KafkaHandler
    {{#notes}}
    @KafkaHandlerDescription("{{notes}}")
    {{/notes}}
    {{#tags}}
    @KafkaHandlerTags(tags = { {{{tags}}} })
    {{/tags}}
    {{#hasOptionalParams}}
    @KafkaHandlerHeaders(headers = {
        {{#queryParams}}
        @KafkaHandlerHeader(header = "{{paramName}}"{{#required}}, required = true{{/required}}),
        {{/queryParams}}
    })

    {{/hasOptionalParams}}
    {{#securityAnnotation}}
    {{#hasAuthMethods}}
    @{{securityAnnotation}}
    {{/hasAuthMethods}}
    {{/securityAnnotation}}
    {{#resultWrapper}}
    {{resultWrapper}}{{#returnSimpleType}}<{{returnType}}>{{/returnSimpleType}}{{^returnSimpleType}}<Void>{{/returnSimpleType}} handle{{methodName}}(@Payload {{methodName}} {{methodNameL}}{{#hasParams}}, @Headers Map<String, String> headers{{/hasParams}});
    {{/resultWrapper}}
    {{^resultWrapper}}
    {{#returnSimpleType}}{{returnType}}{{/returnSimpleType}}{{^returnSimpleType}}void{{/returnSimpleType}} handle{{methodName}}(@Payload {{methodName}} {{methodNameL}}{{#hasParams}}, @Headers Map<String, String> headers{{/hasParams}});
    {{/resultWrapper}}

        {{/vendorExtensions}}
    {{/operation}}
{{/operations}}
}
