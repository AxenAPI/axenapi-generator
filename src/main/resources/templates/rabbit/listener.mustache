/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package {{apiPackage}};

import {{apiPackage}}.service.{{baseName}}Service;
import org.springframework.beans.factory.annotation.Autowired;
import pro.axenix_innovation.axenapi.annotation.KafkaHandlerDescription;
import pro.axenix_innovation.axenapi.annotation.KafkaHandlerTags;
import pro.axenix_innovation.axenapi.annotation.KafkaSecured;
import org.springframework.amqp.rabbit.annotation.RabbitHandler;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import pro.axenix_innovation.axenapi.annotation.KafkaHandlerHeader;
import pro.axenix_innovation.axenapi.annotation.KafkaHandlerHeaders;
{{#imports}}import {{import}};
{{/imports}}
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.Headers;
import java.util.Map;

{{#operations}}
    {{#operation.0.vendorExtensions}}
@RabbitListener(queues = "{{queue}}")
    {{/operation.0.vendorExtensions}}
{{/operations}}
public final class {{baseName}}Listener {
    private final {{baseName}}Service service;

    @Autowired
    public {{baseName}}Listener({{baseName}}Service service) {
        this.service = service;
    }

{{#operations}}
    {{#operation}}
        {{#vendorExtensions}}
    @RabbitHandler
    {{#notes}}
    @KafkaHandlerDescription("{{notes}}")
    {{/notes}}
    {{#tags}}
    @KafkaHandlerTags(tags = { {{{tags}}} })
    {{/tags}}
    {{#hasOptionalParams}}
    @KafkaHandlerHeaders(headers = {
        {{#queryParams}}
        @KafkaHandlerHeader(header = "{{paramName}}"{{#required}}, required = true{{/required}}){{^-last}},{{/-last}}
        {{/queryParams}}
    })
    {{/hasOptionalParams}}
    {{#securityAnnotation}}
    {{#hasAuthMethods}}
    @{{securityAnnotation}}
    {{/hasAuthMethods}}
    {{/securityAnnotation}}
    {{#resultWrapper}}
    {{resultWrapper}}{{#returnSimpleType}}<{{returnType}}>{{/returnSimpleType}}{{^returnSimpleType}}<Void>{{/returnSimpleType}} handle{{modelName}}(@Payload {{modelName}} {{modelNameCamel}}{{#hasParams}}, @Headers Map<String, String> headers{{/hasParams}}) {
    {{/resultWrapper}}
    {{^resultWrapper}}
    {{#returnSimpleType}}{{returnType}}{{/returnSimpleType}}{{^returnSimpleType}}void{{/returnSimpleType}} handle{{modelName}}(@Payload {{modelName}} {{modelNameCamel}}{{#hasParams}}, @Headers Map<String, String> headers{{/hasParams}}) {
    {{/resultWrapper}}
        {{#resultWrapper}}return{{/resultWrapper}}{{^resultWrapper}}{{#returnSimpleType}}return{{/returnSimpleType}}{{/resultWrapper}} service.handle{{modelName}}({{modelNameCamel}}{{#hasParams}}, headers{{/hasParams}});
    }
        {{/vendorExtensions}}
    {{/operation}}
{{/operations}}
}
