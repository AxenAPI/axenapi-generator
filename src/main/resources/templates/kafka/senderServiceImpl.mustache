/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package service.impl;

import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.messaging.support.MessageHeaderAccessor;
import org.springframework.stereotype.Service;
import service.KafkaSenderService;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.springframework.kafka.core.KafkaTemplate;

import java.util.Map;

import org.springframework.kafka.support.converter.MessagingMessageConverter;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

import java.nio.charset.StandardCharsets;
import java.util.UUID;

@Service
public class KafkaSenderServiceImpl implements KafkaSenderService {

    private String messageIdName = "{{messageIdName}}";
    private String correlationIdName = "{{correlationIdName}}";
    private Boolean sendBytes = {{sendBytes}};
    private Boolean generateMessageId = {{generateMessageId}};
    private Boolean generateCorrelationId = {{generateCorrelationId}};

    private final KafkaTemplate<String, Object> kafkaTemplate;
    private final MessagingMessageConverter converter;

    public KafkaSenderServiceImpl(KafkaTemplate<String, Object> kafkaTemplate,
                                  MessagingMessageConverter converter) {
        this.kafkaTemplate = kafkaTemplate;
        this.converter = converter;
    }

    public KafkaTemplate<String, Object> getKafkaTemplate() {
        return kafkaTemplate;
    }

    public void send(String topicName, Object message, Map<String, String> params) {

        MessageHeaderAccessor headerAccessor = new MessageHeaderAccessor();
        if (generateMessageId) {
            if (sendBytes) {
                headerAccessor.setHeader(messageIdName, UUID.randomUUID().toString().getBytes(StandardCharsets.UTF_8));
            } else {
                headerAccessor.setHeader(messageIdName, UUID.randomUUID());
            }
        }
        if (generateCorrelationId) {
            if (sendBytes) {
                headerAccessor.setHeader(correlationIdName, UUID.randomUUID().toString().getBytes(StandardCharsets.UTF_8));
            } else {
                headerAccessor.setHeader(correlationIdName, UUID.randomUUID());
            }
        }
        if (params != null && params.size() > 0) {
            for (var entry : params.entrySet()) {
                if (sendBytes) {
                    headerAccessor.setHeader(entry.getKey(), entry.getValue().getBytes(StandardCharsets.UTF_8));
                } else {
                    headerAccessor.setHeader(entry.getKey(), entry.getValue());
                }
            }
        }
        Message<Object> msg = MessageBuilder.createMessage(message, headerAccessor.getMessageHeaders());
        ProducerRecord producerRecord = converter.fromMessage(msg, topicName);
        kafkaTemplate.send(producerRecord);
    }
}

